// Generated by CoffeeScript 1.3.3
(function() {
  var $, $create, $div, $rightMark, $rightMsg, $rightResult, $span, $wrongMark, $wrongMsg, $wrongResult, Course, altEval, ease, errored, stripQuotes,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  $create = function(tag, cls) {
    if (cls == null) {
      cls = '';
    }
    return $(document.createElement(tag)).addClass(cls);
  };

  $span = function(s, cls) {
    return $create('span', cls).text(s);
  };

  $div = function(s, cls) {
    return $create('div', cls).text(s);
  };

  $rightMark = function() {
    return $span('✔', 'correct eval-mark');
  };

  $wrongMark = function() {
    return $span('✘', 'wrong eval-mark');
  };

  $rightResult = function(result) {
    return $span(result, 'correct');
  };

  $wrongResult = function(result) {
    return $span(result, 'wrong');
  };

  $rightMsg = function() {
    return $span('Correct!', 'correct');
  };

  $wrongMsg = function(result, expected, isCE) {
    var msg;
    msg = 'Please try again.';
    if (isCE && result && (expected != null)) {
      return $span(msg, 'wrong sorry');
    } else if (isCE && (expected != null)) {
      return $span(expected, 'wrong sorry');
    } else if ((!errored(result)) && ((expected != null) && String(expected).indexOf('ReferenceError') === 0)) {
      return $span(expected.slice(16) + '.', 'wrong sorry');
    }
    return $span(msg, 'wrong sorry');
  };

  errored = function(result) {
    return String(result).indexOf('null') === 0 || String(result).indexOf('SyntaxError') === 0 || String(result).indexOf('ReferenceError') === 0;
  };

  altEval = function(result, altSolution) {
    var method, sol, val, _i, _len;
    for (_i = 0, _len = altSolution.length; _i < _len; _i++) {
      sol = altSolution[_i];
      for (method in sol) {
        val = sol[method];
        if (method === 'contains') {
          if (result.indexOf(val) === -1) {
            return false;
          }
        } else if (method === 'minLength') {
          if (result.length < val) {
            return false;
          }
        }
      }
    }
    return true;
  };

  stripQuotes = function(s) {
    s = s.replace(/"\'/g, '"');
    s = s.replace(/"\"/g, '"');
    s = s.replace(/\'"/g, '"');
    s = s.replace(/\""/g, '"');
    return s;
  };

  ease = {
    show: 'easeOutCirc',
    scrollNext: 'easeInOutQuad',
    scrollTo: 'easeOutCubic',
    speed: 1700
  };

  Course = (function() {

    function Course($course, $courseCE, lessons) {
      this.lessons = lessons;
      this.showHint = __bind(this.showHint, this);

      this.lesson = 1;
      this.exercise = 1;
      this.iExercise = 0;
      this.score = _(this.lessons).map(function(lesson) {
        return _.map(lesson.exercises, function(ex) {
          return 0;
        });
      });
      this.attempt = _.clone(this.score);
      this._numExercises = [].concat(_.map(this.score, function(lesson) {
        return lesson.length;
      }));
      this._nextExercise = _.map(this.score, function(lesson) {
        return 1;
      });
      this._editors = [];
      LiveCode.scan($course, function(ed) {
        this._editors.push(ed);
        return ed.setOption('extraKeys', {
          'Enter': function() {
            return ed.getOption("onBlur")();
          }
        });
      }, this);
      LiveCode.scan($courseCE, function(ed) {
        this._editors.push(ed);
        ed.setOption('extraKeys', {
          'Ctrl-Enter': function() {
            return ed.getOption("onBlur")();
          }
        });
        return ed.setOption('lineNumbers', true);
      }, this);
      this._exerciseCnt = this._editors.length;
      this._scrollY = _.map(this.score, function(lesson) {
        return 0;
      });
    }

    Course.prototype.keepScore = function(correct, lesson, exercise) {
      if (lesson == null) {
        lesson = this.lesson;
      }
      if (exercise == null) {
        exercise = this.exercise;
      }
      if (correct) {
        this.score[lesson - 1][exercise - 1] = 1;
      }
      return this.attempt[lesson - 1][exercise - 1] += 1;
    };

    Course.prototype.getAttempt = function(lesson, exercise) {
      if (lesson == null) {
        lesson = this.lesson;
      }
      if (exercise == null) {
        exercise = this.exercise;
      }
      return this.attempt[lesson - 1][exercise - 1];
    };

    Course.prototype.completedLesson = function(lesson) {
      if (lesson == null) {
        lesson = this.lesson;
      }
      return _.every(this.score[lesson - 1], _.identity);
    };

    Course.prototype.setCurrent = function(lesson, exercise) {
      this.lesson = lesson;
      this.exercise = exercise || this.nextExercise(this.lesson);
      return this.iExercise = this.getiExercise(lesson, this.exercise);
    };

    Course.prototype.nextExercise = function(lesson) {
      return this._nextExercise[lesson - 1];
    };

    Course.prototype.setNextExercise = function() {
      return this._nextExercise[this.lesson - 1] = this.onLastExerciseInLesson() ? this.exercise : this.exercise + 1;
    };

    Course.prototype.getiExercise = function(lesson, exercise) {
      var numExercises;
      if (lesson == null) {
        lesson = this.lesson;
      }
      if (exercise == null) {
        exercise = this.exercise;
      }
      numExercises = _.reduce(this._numExercises, function(mem, cnt, i) {
        if (i < lesson - 1) {
          return cnt + mem;
        } else {
          return mem;
        }
      }, 0);
      return numExercises + exercise - 1;
    };

    Course.prototype.onLastExerciseInLesson = function(exercise) {
      if (exercise == null) {
        exercise = this.exercise;
      }
      return exercise === this.lessons[this.lesson - 1].count;
    };

    Course.prototype.onEndOfCourse = function(exercise) {
      if (exercise == null) {
        exercise = this.exercise;
      }
      return this.onLastExerciseInLesson && (this.lesson === this.lessons.length);
    };

    Course.prototype.curEditor = function(lesson, exercise) {
      if (lesson == null) {
        lesson = this.lesson;
      }
      if (exercise == null) {
        exercise = this.exercise;
      }
      return this._editors[this.getiExercise(lesson, exercise)];
    };

    Course.prototype.nextEditor = function() {
      var iNext;
      iNext = this.iExercise + 1 < this._exerciseCnt ? this.iExercise + 1 : this.iExercise;
      return this._editors[iNext];
    };

    Course.prototype.grade = function(correct, $result, result, expected, isCE) {
      if (correct) {
        $result.empty().append($rightResult(result), $rightMark());
      } else {
        $result.empty().append($wrongResult(result), $wrongMark(), $wrongMsg(result, expected, isCE));
      }
      return $result.parent().removeClass('hide');
    };

    Course.prototype.evaluate = function(result, exercise, codeblock, $output, isCE, cb) {
      var data;
      this.setCurrent(this.lesson, exercise);
      data = this.lessons[this.lesson - 1].exercises[exercise];
      return this.evalAndGrade(result, data, codeblock, $output, isCE, cb);
    };

    Course.prototype.evalAndGrade = function(result, exercise, codeblock, $output, isCE, cb) {
      var $remark, $result, evaluation, expected, _ref;
      $result = $output.find('.result-wrap');
      $remark = $output.find('.remark').filter(':hidden');
      _ref = this._eval(result, exercise, codeblock, isCE), expected = _ref[0], evaluation = _ref[1];
      if (result === void 0 && !isCE) {
        result = 'undefined';
      }
      if (evaluation) {
        this.grade(true, $result, result, isCE);
        if ($remark.length) {
          return $remark.slideDown(500, ease.show, function() {
            return cb.call(this, true, $output);
          });
        } else {
          return cb.call(this, true, $output);
        }
      } else {
        this.grade(false, $result, result, expected, isCE);
        return cb.call(this, false);
      }
    };

    Course.prototype._eval = function(result, exercise, codeblock, isCE) {
      var expected, noError;
      noError = !errored(result);
      if (isCE) {
        codeblock.context["eval"](exercise.Solution);
        expected = codeblock.context["eval"]("ls_validate(" + result + ")");
        return [expected, noError && (expected === 'true')];
      } else {
        expected = codeblock.context["eval"](exercise.Solution);
        return [expected, noError && ((result === expected) || (errored(expected) && (exercise.AltSolution != null) && altEval(result, exercise.AltSolution)))];
      }
    };

    Course.prototype.scrollNext = function($output, isCE) {
      var top;
      if (isCE) {
        top = $output.offset().top + 100;
      } else {
        top = $output.prev().offset().top - 10;
      }
      return $('html,body').animate({
        scrollTop: top
      }, ease.speed, ease.scrollNext);
    };

    Course.prototype.saveScroll = function(lesson) {
      if (lesson == null) {
        lesson = this.lesson;
      }
      return this._scrollY[lesson - 1] = window.scrollY || window.pageYOffset;
    };

    Course.prototype.showLesson = function(lesson) {
      var y;
      if (lesson == null) {
        lesson = this.lesson;
      }
      this.focusExercise();
      y = this.exercise === 1 ? 0 : this._scrollY[lesson - 1];
      return setTimeout((function() {
        return window.scrollTo(0, y);
      }), 100);
    };

    Course.prototype.focusExercise = function(next) {
      var nextExercise;
      $('.toc-exercises').eq(this.lesson - 1).find('.exercise-link').removeClass('is-on');
      if (next) {
        nextExercise = this.onLastExerciseInLesson(this.exercise) ? this.exercise : this.exercise + 1;
        $('.toc-exercises').eq(this.lesson - 1).find('.exercise-link').eq(nextExercise - 1).addClass('is-on');
        return this.nextEditor().focus();
      } else {
        $('.toc-exercises').eq(this.lesson - 1).find('.exercise-link').eq(this.exercise - 1).addClass('is-on');
        return this.curEditor().focus();
      }
    };

    Course.prototype.onClick = function(node, what) {
      var exercise, lesson;
      lesson = $(node).data('lesson');
      exercise = $(node).data('exercise');
      this.setCurrent(lesson, exercise);
      this.focusExercise();
      if (what === 'run') {
        return this.curEditor().getOption('onBlur')();
      }
    };

    Course.prototype.scrollTo = function(prvExercise) {
      var from, lesson, ms, to,
        _this = this;
      lesson = $('.lesson').eq(this.lesson - 1);
      from = lesson.find('.exercise').eq(prvExercise - 1).offset().top;
      to = lesson.find('.exercise').eq(this.exercise - 1).offset().top - 10;
      ms = Math.abs(from - to) / 2;
      return $('html,body').animate({
        scrollTop: to
      }, ms, ease.scrollTo, function() {
        return _this.focusExercise();
      });
    };

    Course.prototype.loadLesson = function(init, prvLesson) {
      $('.lesson').hide().eq(this.lesson - 1).show();
      $('.toc-lesson .lesson-link').removeClass('is-on').eq(this.lesson - 1).addClass('is-on');
      if (init) {
        $('.toc-exercises').hide().eq(this.lesson - 1).show();
      } else if (prvLesson !== this.lesson) {
        $('.toc-exercises').slideUp().eq(this.lesson - 1).slideDown();
      }
      return this.showLesson();
    };

    Course.prototype.switchLesson = function(link) {
      var prvLesson;
      this.saveScroll();
      prvLesson = this.lesson;
      this.setCurrent($(link).data('next'), $(link).data('exercise'));
      return this.loadLesson(false, prvLesson);
    };

    Course.prototype.loadExercise = function(link) {
      var exercise, lesson, prvExercise, prvLesson;
      prvLesson = this.lesson;
      prvExercise = this.exercise;
      lesson = $(link).data('next');
      exercise = $(link).data('exercise');
      if (prvLesson !== lesson) {
        return this.switchLesson(link);
      } else {
        this.setCurrent(lesson, exercise);
        return this.scrollTo(prvExercise);
      }
    };

    Course.prototype.markCorrect = function() {
      var exerciseNode;
      exerciseNode = $('.toc-exercises').eq(this.lesson - 1);
      exerciseNode.find('li').eq(this.exercise - 1).addClass('completed');
      exerciseNode.find('.eval-mark').eq(this.exercise - 1).removeClass('hide');
      if (this.completedLesson()) {
        $('.toc-lesson').eq(this.lesson - 1).addClass('completed');
        return $('.toc-lesson .eval-mark').eq(this.lesson - 1).removeClass('hide');
      }
    };

    Course.prototype.onCorrect = function($output, isCE) {
      this.keepScore(true);
      this.markCorrect();
      this.scrollNext($output, isCE);
      if (this.onLastExerciseInLesson()) {
        $('.next-lesson').eq(this.lesson - 1).removeClass('hide');
      }
      this.setNextExercise();
      return this.focusExercise(true);
    };

    Course.prototype.showHint = function(node) {
      var $btn, hintBtnTxt, hints, noHints, top;
      $btn = $(node);
      hints = $btn.parent().next().find('.hint.hiddenState');
      $btn.siblings('.hint-title').css('visibility', 'visible');
      if (hints.length) {
        hints.first().slideToggle(200).removeClass('hiddenState');
      }
      noHints = hints.length <= 1;
      hintBtnTxt = noHints ? "No more hints" : 'Show more hints';
      $btn.text(hintBtnTxt);
      if (noHints) {
        $btn.addClass('disabled');
      }
      if (this.onLastExerciseInLesson($btn.data('exercise'))) {
        top = $btn.offset().top - 10;
        $('html,body').animate({
          scrollTop: top
        }, ease.speed, ease.scrollNext);
        return this.saveScroll();
      }
    };

    return Course;

  })();

  this.Course = Course;

}).call(this);
