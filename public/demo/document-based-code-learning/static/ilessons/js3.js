// Generated by CoffeeScript 1.4.0
(function() {

  CourseContent.lessons.push({
    number: 3,
    title: "Dive Into Strings",
    description: "Welcome to Lesson 3! In this lesson we\'ll dig a little deeper into the world of strings, something you\'ve already seen quite a bit of. Strings are useful for a lot of things, including storing text, website URLs, values of form fields, and more.",
    exercises: {
      1: {
        Prompt: "A string is a sequence of characters, such as letters, numbers, and other symbols. When you create strings in JS, you always place single or double quotes around them. The important thing is to be consistent. If you start with a double quote, you must end the string with a double quote. Likewise with a single quotes. Some examples of strings are: <code>\"i'm a string\"</code> (notice how the single quote is used within the double quotes), and <code>'123'</code>. <action>Let\'s create a variable <code>myName</code> and assign to it a string containing your name</action> and press Enter.",
        Hint: [' Remember to put quotes around your name to indicate that it is a string. ', ' Remember to use the <code>var</code> keyword since you are declaring a variable. Use the assignment operator, <code>=</code>, to assign a value to the variable. ', ' Type <code>var myName = "your name here";</code> and press Enter. '],
        Solution: 'typeof myName == "string" && myName',
        Summary: ' Great! Now that you\'ve created a string, let\'s cover some things you can do with strings. ',
        Description: ' What Are Strings? ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "5020e68825767825cd00001a"
      },
      2: {
        ExerciseCode: 'ls="Learning"',
        Prompt: ' We\'ve already seen in the first lesson that one of the things we can do with strings is combine multiple strings together. Remember we can do this using the <code>+</code> operator. <action>Why don\'t you try concatenating (combining) the strings "Learn" and "ing", and store it in a variable named <code>ls</code>.</action> ',
        Hint: [' You can concatenate (combine) two strings, a and b, by doing <code>a + b</code>. ', ' Type <code>var ls = "Learn" + "ing";</code> and press Enter.  '],
        Solution: 'ls == "Learning" && ls',
        Summary: ' Awesome! The <code>+</code> operator created a new string by copying the characters from "Learn" and "ing". ',
        Description: ' Combining Strings ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "5020e70025767825cd00001b"
      },
      3: {
        ExerciseCode: 'var ls = "Learning";',
        Prompt: ' Remember that a string is a sequence of characters. The length of a string is the number of characters in it. Every string in JS has a <code>length</code> property which stores the number of characters in the string. For example, <code>"keep it up".length</code> will evaluate to 10 (remember, spaces are characters too). \n\n<action>Get the length of the string stored in the variable <code>ls</code>.</action>',
        Hint: [' You can get the length of a string by using putting <code>.length</code> after the variable name. ', ' Type <code>ls.length;</code> and press Enter. '],
        Solution: 'ls.length;',
        Summary: ' Now you have a way to get the length of long sentences, instead of counting the characters one by one! ',
        Description: ' Length of a String ',
        ReInitialize: 'True',
        EvalSolution: 'True',
        ExerciseID: "5020e7db25767825cd00001c"
      },
      4: {
        Prompt: ' Imagine that you have a list of strings containing words and you want to sort them alphabetically. You\'ll need a way to get the first character in each string. You might even need the second or third character if there are multiple words with the same first letter. \n\nThe <code>charAt(index)</code> is a handy way to get the character at a specific position in a string. Keep in mind that strings are zero-indexed, meaning the first position is position 0, the next one is position 1, and the last one is position length - 1. \n\nFor example, we can get the character at position <code>2</code> in the string <code>"hello"</code> by doing <code>"hello".charAt(2)</code>. \n\n<action>What is the last character in the string stored in the variable <code>ls</code>?</action> ',
        Hint: [' Remember that strings are zero-indexed, so the last index is not the length, but rather the length - 1. ', ' You can get the character at an index by using the <code>charAt(index)</code> function. ', ' Type <code>ls.charAt(ls.length - 1);</code> and press Enter. '],
        Solution: 'ls.charAt(ls.length - 1)',
        Summary: ' Good Job! ',
        Description: ' Selecting Characters ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "5020e84225767825cd00001d"
      },
      5: {
        ExerciseCode: 'var message = "Hello World";',
        Prompt: ' It\'s great that we can get one character using <code>charAt(index)</code>, but what if we wanted to get a longer part of a string? A contiguous part of a string is called a substring. The <code>substring(start, end)</code> function gives us a substring starting at the <code>start</code> index and going up to but not including the <code>end</code> index. \n\n<action>Use the <code>substring(start, end)</code> function to select the first word in the string stored in the already created variable <code>message</code>. It stores the string <code>"Hello World"</code>. ',
        Hint: [' Look at the string "Hello World" and count the index at which you want the substring to end. Remember that <code>substring(start, end)</code> returns a substring that stops at one position before the <code>end</code> index. ', ' Remember that the first position in a string is position 0, the next one is position 1, etc. ', ' Type <code>message.substring(0, 5);</code> and press Enter. '],
        Solution: 'message.substring(0, 5);',
        Summary: ' Great! Now we can do something like selecting a word out of a sentence. ',
        Description: ' Substrings ',
        ReInitialize: 'True',
        EvalSolution: 'True',
        ExerciseID: "5020e94a25767825cd00001e"
      },
      6: {
        ExerciseCode: 'var message = "i used to be lowercase but now i am uppercase";',
        Prompt: ' It\'s time to get angry and yell at people on the Internet! Just joking ;) Instead of holding down the Shift key or using Caps Lock, let\'s try to code something to do it. We can use the <code>toUpperCase()</code> function to do this. \n\n<action>The string variable <code>message</code> has been created. Find out the upper case version of it by applying <code>toUpperCase()</code> on it.</action> ',
        Hint: [' You can see an example of how to use <code>toUpperCase()</code> in the description section under String Utility Functions. ', ' Type <code>message.toUpperCase();</code> and press Enter. '],
        Solution: 'message.toUpperCase();',
        Summary: ' Congratulations, you have successfully changed lowercase text to uppercase. Let\'s keep going and look at some more things you can do with strings. ',
        Description: ' Change to Upper Case ',
        ReInitialize: 'True',
        EvalSolution: 'True',
        ExerciseID: "5020e9ff25767825cd00001f"
      },
      7: {
        ExerciseCode: 'var message = "this is not spam!"',
        Prompt: ' What if you wanted to check if a string contains a particular character or substring? One way to do this is using the <code>indexOf(value)</code> function. This function takes a character or string and returns the first index at which it occurs. For example, <code>"the big bang".indexOf("big")</code> returns 4 because "big" starts at index 4. When the character or string provided is not present, this function returns -1.\n\nWe received an email from an unknown source. The content of the email is stored in the variable <code>message</code>. The way our email application works is if the message contains the word "free", it goes to our spam folder. <action>Find out if the message should go to our spam folder</action>. If the email is spam (e.g. contains "free"), your expression should evaluate to true and otherwise evaluate to false. ',
        Hint: [' Remember that the <code>indexOf(value)</code> function returns an index if the specified character or string is present, and -1 if it isn\'t. ', ' You can use the <code>!=</code> operator to see if two values are not equal. ', ' Type <code>message.indexOf("free") != -1;</code> and press Enter. '],
        Solution: 'message.indexOf("free") != -1;',
        Summary: ' Nice! That should take care of most of the spam we get. ',
        Description: ' What is your Index? ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "506518b65773533e090000cd"
      },
      8: {
        ExerciseCode: 'var message = "yeh";',
        Prompt: ' Now that we\'ve covered some commonly used string helper functions, let\'s try to do something a little harder. We\'re going to give you a string and you\'re going to return the reverse of the string. For example, if we give you <code>"gum"</code>, you will return <code>"mug"</code>. \n\nHow do you do this? Remember that we can use the <code>+</code> operator to combine two strings together, and we can use the <code>charAt(index)</code> function to get the character at a given index. \n\nThe variable <code>message</code> contains a three letter word. <action>What is the reverse of the string stored in <code>message</code>?</action> ',
        Hint: [' Because <code>message</code> is three letters long, we know that the last letter is <code>message.charAt(2)</code>, the middle character is <code>message.charAt(1)</code>, and the first character is <code>message.charAt(0)</code>. ', ' Type <code>message.charAt(2) + message.charAt(1) + message.charAt(0);</code> and press Enter.'],
        Solution: '"hey"',
        Summary: ' Good job! That was a tedious way to reverse a string. We\'ll go over an easier way to do this using something called a loop in a later section. ',
        Description: ' Reversing a String ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "50651b7c5773533e080000c7"
      },
      9: {
        ExerciseCode: 'var message1 = "i ate cake"; var message2 = "aakash wants your cookie";',
        Prompt: ' Your friend wants to text you a secret message. But she doesn\'t want to send it in one text, in case your arch nemesis gets hold of your phone. Instead of just sending the secret message in one text, she\'s going to split up her secret and send you two messages. The first half of the first message combined with the second half of the second message will give you the full secret message.\n\nThe first message is stored in <code>message1</code> and the second message in <code>message2</code> <action>Figure out what the full secret message is, using what you\'ve learned so far.</action> ',
        Hint: [' You can use the <code>substring(start, end)</code> function to get part of a string. Remember that the substring will go up to but not including the <code>end</code> index. ', ' The middle element of a string is at position <code>length / 2</code>. You can assume that the string has an even length. ', ' Type <code>message1.substring(0, message1.length / 2) + message2.substring(message2.length / 2, message2.length);</code> and press Enter. '],
        Solution: '"i ate your cookie"',
        Summary: ' Oh noes, she ate your cookie! What a bad friend. ',
        Description: ' What\'s the Secret? ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "5065209f5773533e080000c8"
      }
    },
    Summary: ' <p>\n    Great job on completing this Lesson! In this lesson you were introduced to strings in JavaScript. Here are the key points to remember from Lesson 3 - Dive into Strings:<br/><p></p>\nWe already saw strings in lesson 2, but in this lesson we covered it in more detail. Strings are an important part of programming as they let you store and manipulate text. Let’s review what we learned in this lesson:\n</p>\n<ul>\n     <li>\n           <b><u>Double Quotes:</u></b> In order to tell JavaScript something is a string, you need to put double quotes around it, like “I’m a string!”.\n     </li>\n     <li>\n           <b><u>“+” Operator:</u></b> You can combine (or concatenate) strings together using the + operator. For example “Learn” + “ingcreates the string “Learning”.\n     </li>\n     <li>\n           <b><u>Length:</u></b> The length property of a string tells you how many characters long it is. For example, “Gangnam Style”.length returns 13.\n     </li>\n     <li>\n           <b><u>Zero-Indexed:</u></b> Strings are zero-indexed, so the first position is position 0 and the last position is its length minus one. For example, if we have a string str, str.charAt(0) gives us the first character and str.charAt(str.length - 1) gives us the last character.\n     </li>\n     <li>\n           <b><u>Utility Functions:</u></b> There are utility functions for strings that JavaScript provides, like charAt, substring, toUpperCase, split, and many more.\n     </li>\n</ul>\n</p>\n<p style="margin-bottom:10px;">\n    <font face="Helvetica, Arial, sans-serif" color="#606060" size="3">\n		<b>Did you know?</b> <br/>\n		Strings are immutable (meaning once you create them, you can’t change them), so many operations that change strings actually end up creating new strings. For example, if we do:\n		<p></p>\n		var learn = “Learn”;<br/><p></p>\n		Then we do <br/><p></p>\n		learn = learn + “ing”<br/><p></p>\n		We are not actually changing “Learn” to “Learning”, but we are creating a new string “Learning” and assigning that to the variable learn.<br/><p></p>\n		We hope you enjoyed your lesson on stings. </font>\n</p> ',
    CurrentLang: "javascript",
    count: 9
  });

}).call(this);
