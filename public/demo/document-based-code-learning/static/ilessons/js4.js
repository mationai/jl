// Generated by CoffeeScript 1.4.0
(function() {
  CourseContent.lessons.push({
    number: 4,
    title: "Functions",
    CodeEditor: true,
    description: "Functions are blocks of code that run only when you tell them to run. For example, in JS, you may want to call a function when a user clicks on a button. Functions are useful because they let you reuse code you've already written, and make your code easier to understand.",
    overviewText: "Functions, Global vs. Local Variables, and Comments",
    overview: {
      "Examples": "Here is an example of what a function looks like:<br><code>function function_name() {<br> &nbsp;&nbsp;&nbsp;&nbsp;// function body<br> }</code><br><br> The function body resides between the curly braces. This is the chunk of code that gets executed when you call the function. <br><br> Sometimes you may want to provide (pass) some values, or arguments, into the function. When you pass these arguments in, the function can use and operate on the values. You can pass multiple arguments into a function by separating them with commas. Here's a function that takes multiple arguments:<br><br> <code> function exponent(a, b) {<br> &nbsp;&nbsp;&nbsp;&nbsp;//code<br> }</code><br><br> Functions can also return values. This means that when you call such a function, you get a value back. For example, here's a function that returns the square of a number when you call it with a number:<br><br> <code>function square(num) {<br> &nbsp;&nbsp;&nbsp;&nbsp;return num*num;<br> }</code><br><br> Let's take a closer look at each part of the <code>square</code> function above. The first thing is the <code>function</code> keyword. This tells JS that we're creating a function. Next is the name of the function: <code>square</code>. Since we want this function to accept an argument called <code>num</code>, the number that we want to square, we put it in between parentheses right after the function name. Now we add the curly braces and put the function body (which contains the code that the function will execute upon being called) between the braces. In order to run (or call) the function, we type its name followed by a pair of parentheses. If we need to provide arguments, we put them between the parentheses. For example, to square the number 5, we write <code>square(5);</code>.",
      "Naming Conventions": "What's a good name for a function? Just as with variables, function names should be descriptive of what the function is supposed to do. For example, <code>square</code> is a good function name because the <code>square</code> function return the square of a number. Valid characters for function names are the same as variable names, which must begin with a letter, the $ or _ symbol, and may contain (but not start with) numbers.  The common practice for JavaScript function names are same as for variable names, which is to use (lower) camel case like <code>helloWorld</code>.",
      "Global vs Local Variables": "Global variables are variables that can be accessed from anywhere in the file containing the program's JS code. They are defined outside of any function, conventionally at the top of the file (or in our case, the code editor). A local variable is defined inside of a function and can be used only within the function itself. It's not good practice to use the same name for a global and local variable, but if it does happen, the local variable will override the value inside the method. What this is means is if you have a global variable and a local variable with the same name, and you refer to the variable by its name in the function, it will use the value of the local variable instead of the global variable. Let's look at an example: <br><br> <code> var counter = 0; // this is a global variable</code><br><br> <code> function test() {<br> &nbsp;&nbsp;&nbsp;&nbsp;var counter = 5; // local variable<br> &nbsp;&nbsp;&nbsp;&nbsp;return counter;<br>}</code><br><br> In this case, <code>test();</code> will return 5, not 0, since the local <code>counter</code> variable has the value 5.",
      "Comments": "Comments are used to explain your code to other programmers (and yourself!) and to make it more readable. Anything that is commented out are not executed. You can comment out lines of code by starting it with double backslashes (<code>//</code>). For example, in the following piece of code:<br><code>someCode(); // This is a comment</code><br><code>someCode();</code> will be run, but the rest of the line will not since it is commented out. You can also create multi-line comments by surrounding the code block with <code>/*</code> and <code>*/</code>. For example: <code>/* This is a <br>multi-line<br>comment*/</code>." 
    },
    exercises: {
      1: {
        EditorCode: 'function sum(x, y) {\n    //Write a statement below to return the sum.\n}',
        Prompt: ' Let\'s write our first function! Take a look at the code in the code editor. We\'ve already written the function header, but we\'ve left out the function body. This function takes two numbers and is supposed to return their sum. \n\n<action>Complete the function by adding a statement inside the function body that returns the sum of the two arguments.</action> Click on the RUN button when you are done. ',
        Hint: [' Remember that <code>//</code> indicates that the line of code is a comment. Make sure your statement isn\'t in the same line as the comment, or it will not be executed. ', ' Use the <code>return</code> statement to return a value. Remember that you can add numbers in JS using the <code>+</code> operator. ', ' Type the following in the code editor and click on the RUN button to check your answer: <br><br>\n\n<code>\nfunction sum(x, y) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;    //Write a statement below to return the sum.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;    return x + y;<br>\n}\n</code>\n\n '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n    var x = 4;\n    var y = 5;\n     function_return = sum(x, y);\n     actual_sum = x + y;\n   } catch(err) {\n     return \'We are unable to check your code because it contains errors. Refer to the hints if you need help.\';\n   }\n   if (function_return == actual_sum) {\n      return true;\n   } else {\n      return \'Please check if you returning the sum of x and y.\';\n   }\n}',
        Summary: ' Congratulations, you just wrote your first function!  ',
        Description: ' Simple Addition Function ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "502363d12576784c22000008"
      },
      2: {
        EditorCode: '/*Write a function below called divide that takes two numbers\nand returns the first number divided by the second.\nFor example, divide(6, 2) should return 3. \nStart your function on a new line below this comment block.*/',
        Prompt: ' In the previous exercise, we gave you the function header. This time around, you\'re going to code a function from scratch. <action>Write a function called <code>divide</code> that takes two numbers and returns the first number divided by the second.</action> ',
        Hint: [' Remember what the <code>sum</code> function looked like. Here it is for your reference: \n<br><br><code>\nfunction sum(x, y) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;    return a+b;<br>\n}</code> ', ' Use the <code>/</code> operator to divide two numbers. ', ' Paste this code below the comment and click on the RUN button:<br><br>\n<code>\nfunction divide(x, y) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;return x / y;<br>\n}\n</code> '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n     var x = 10;\n     var y = 2;\n     function_return = divide(x, y);\n     actual_division = x / y;\n   } catch(err) {\n     return \'We are unable to check your code because it contains errors. Refer to the hints if you need help.\';\n   }\n\n   if (function_return == actual_division) {\n      return true;\n   } else {\n      return \'Please check if you are dividing the numbers correctly\';\n   }\n}',
        Summary: ' Nicely done! ',
        Description: ' Division Problem ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "5023644d2576784c22000009"
      },
      3: {
        EditorCode: 'function capitalizeFirst(str) {\n    /*Write the function body below to return a string that is\n      identical to str except that its first letter is capitalized.*/\n    \n}',
        Prompt: ' <action>Write a function called <code>capitalizeFirst</code> that takes a string and returns another string that is identical to the argument string except that the first letter is capitalized</action>. For example, <code>capitalizeFirst("david");</code> should return <code>"David"</code>. ',
        Hint: [' The following string utility functions should be helpful: <code>charAt(index)</code>, <code>toUpperCase()</code>, and <code>substring(start, end)</code>. Remember that <code>substring</code> does NOT include the <code>end</code> index. ', ' You can use the <code>+</code> operator to combine strings. Make sure to return the result. ', ' Type the following in the code editor and click on the RUN button:<br><br>\n<code>\nfunction capitalizeFirst(str) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;return str.charAt(0).toUpperCase() + str.substring(1, str.length);<br>\n}\n</code> '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n     var str = \'java\';\n     function_return = capitalizeFirst(str);\n   } catch(err) {\n     return \'We are unable to check your code because it contains errors. Refer to the hints if you need help.\';\n   }\n\n   if (function_return == "Java") {\n      return true;\n   } else {\n      return \'Please check if you are capitalizing the first letter only and not modifying the rest of the string.\';\n   }\n}',
        Summary: ' Good Job! In the next exercise, we\'ll use this function to do something cool. ',
        Description: ' Capitalize the First Letter ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "502364f92576784c2200000a"
      },
      4: {
        EditorCode: 'function capitalizeFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1, str.length);\n}\n\nfunction capitalizeName(name){\n    //The string below contains a lower case version of name. Let\'s use this from now on.\n    var lowerName = name.toLowerCase();\n\n    var spaceIndex = lowerName.indexOf(\' \');\n    var first = lowerName.substring(0, spaceIndex)\n\n    //Complete the function body below.\n    \n}',
        Prompt: ' You\'re building a website and you want to store everyone\'s names with correct capitalization. People use all sorts of capitalizations when they enter their first and last name, like "jOhn SMIth", "anne doe", and "david Shi", for example. You want to store names so that only the first letter of the first name and first letter of the last name are capitalized, like "Amy Sue". <br><br>\n\n<action>In the code editor, complete the function called <code>capitalizeName</code> that takes a string containing someone\'s full name, with their first name and last name separated by a space like "bOb dyLan", and returns the correctly capitalized name, like "Bob Dylan".</action> We\'ve already started it for you by converting the name to lower case. It will be useful to use the <code>capitalizeFirst</code> function which you coded in the previous exercise.',
        Hint: [' Use the <code>substring</code> utility function to extract the last name. ', ' Use the <code>capitalizeFirst</code> function to capitalize the first letter of the first and last names. Remember to return the correctly capitalized full name, with the first and last name separated by a space. ', ' Type the following in the code editor and click on the RUN button:<br><br>\n\n<code>\nfunction capitalizeFirst(str) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;return str.charAt(0).toUpperCase() + str.substring(1, str.length);<br>\n}<br><br>\n\nfunction capitalizeName(name){<br>\n&nbsp;&nbsp;&nbsp;&nbsp;var lowerName = name.toLowerCase();<br><br>\n\n&nbsp;&nbsp;&nbsp;&nbsp;var spaceIndex = lowerName.indexOf(\' \');<br>\n&nbsp;&nbsp;&nbsp;&nbsp;var first = lowerName.substring(0, spaceIndex)<br><br>\n\n&nbsp;&nbsp;&nbsp;&nbsp;var last = lowerName.substring(spaceIndex + 1, lowerName.length);<br>\n&nbsp;&nbsp;&nbsp;&nbsp;return capitalizeFirst(first) + \' \' + capitalizeFirst(last);<br>\n}</code> '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n     var str = \'aAkAsh pRasad\';\n\n     function_return = capitalizeName(str);\n   } catch(err) {\n     return \'We are unable to check your code because it contains errors. Refer to the hints if you need help.\';\n   }\n\n   if (function_return == "Aakash Prasad") {\n      return true;\n   } else {\n      return \'Make sure you are capitalizing the first letter of the first name and last name and putting a space between the first and last name.\';\n   }\n}',
        Summary: ' Now you know how to correct annoying capitalizations of names! ',
        Description: ' Capitalize Names ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "502365562576784c2200000b"
      },
      5: {
        EditorCode: '/*Write a function below called square that takes\n   a number and returns its square.*/',
        Prompt: ' Let\'s do some more practice with functions. <action>Write a function called <code>square</code> that takes a number and returns the square of that number.</action> ',
        Hint: [' The square of a number is the number multiplied by itself. ', ' Remember how to create a function. You need to use the <code>function</code> keyword, followed by the function name, argument(s) inside parentheses, then the function body in between curly braces. ', ' Type the following code into the code editor and click on the RUN button:<br><br>\n<code>\nfunction square(num) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;return num * num;<br>\n}\n</code> '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n     var a = 3;\n\n     function_return = square(a);\n   } catch(err) {\n     return \'We are unable to check your code because it contains errors. Refer to the hints if you need help.\';\n   }\n\n   if (function_return == 9) {\n      return true;\n   } else {\n      return \'Please check if you are computing the square correctly.\';\n   }\n}\n',
        Summary: ' That\'s convenient! We\'ll use this in the next exercise to do something a little harder. ',
        Description: ' Square a Number ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "502365d62576784c2200000c"
      },
      6: {
        EditorCode: 'function square(num) {\n    return num * num;\n}\n\n//Write your sumOfSquares function below.',
        Prompt: ' <action>Write a function called <code>sumOfSquares</code> that takes two numbers as arguments and returns the sum of the square of each number. </action>  ',
        Hint: [' Call the <code>square</code> function within this function. ', ' Type the following code in the code editor and click on the RUN button:<br><br>\n<code>\nfunction sumOfSquares(a, b) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;return square(a) + square(b);<br>\n}\n</code> '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n     var a = 3;\n     var b = 4;\n\n     function_return = sumOfSquares(a, b);\n   } catch(err) {\n     return \'We are unable to check your code because it contains errors. Refer to the hints if you need help.\';\n   }\n\n   if (function_return == 25) {\n      return true;\n   } else {\n      return \'Please check if you are computing the sum of the squares correctly\';\n   }\n}',
        Summary: ' Nice work! Now you\'ve seen that you can call a function from another function. Enough with numbers. Let\'s play with  strings now. ',
        Description: ' Sum of Squares ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "502366442576784c2200000d"
      },
      7: {
        EditorCode: 'function triangleArea(base, height) {\n    /*Complete the function body below to return the area of a \n      triangle with the given base and height.*/\n    \n}',
        Prompt: ' Let\'s write a function that might be useful if you have geometry homework. <action>Code a function called <code>triangleArea</code> that takes two numbers -- <code>base</code> and <code>height</code> -- and returns the area of a triangle with the given base and height.</action> The formula for the area of a triangle is (1/2) * base * height. ',
        Hint: [' Remember to return the computed area. ', ' Type the following code in the code editor and then click on the RUN button:<br><br>\n<code>\nfunction triangleArea(base, height) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;return 0.5 * base * height;<br>\n}\n</code> '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n     var base = 10;\n     var height = 10;\n\n     function_return = triangleArea(base, height);\n   } catch(err) {\n     return \'We are unable to check your code because it contains errors. Refer to the hints if you need help.\';\n   }\n\n   if (function_return == 50) {\n      return true;\n   } else {\n      return \'Please check if you computing the area correctly.\';\n   }\n}',
        Summary: ' Wow good one. Let\'s get into some other string manipulation.  ',
        Description: ' Area of Triangle ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "502367712576784c2200000f"
      },
      8: {
        EditorCode: 'function hello(name){\n //Complete the function body below to say hello to name.\n}',
        Prompt: ' Now we are going to code a function that says \'hello\' to you. <action>Code a function called <code>hello</code> that takes in one argument, your name, and returns the string "Hello, " followed by your name.</action> ',
        Hint: [' Remember that every character matters. Don\'t forget to capitalize the H, and don\'t omit the comma or the space. ', ' Type this in the code editor and click on the RUN button:<br><br>\n<code>\nfunction hello(name) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;return "Hello, " + name;<br>\n}\n</code> '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n     var str = "Aakash";\n\n     function_return = hello(str);\n   } catch(err) {\n     return \'Please correct the errors in your code\';\n   }\n\n   if (function_return == "Hello, Aakash") {\n      return true;\n   } else {\n      return \'Please check that your string starts with "Hello, " and ends with the input given in the method\';\n   }\n}',
        Summary: ' Hello, young Padawan. ',
        Description: ' Just Came to Say Hello ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "502367f02576784c22000010"
      },
      9: {
        EditorCode: 'var x = 10;\n\nfunction incrementX(amount) {\n //Write code to increment x by amount. Don\'t return anything.\n}',
        Prompt: ' In this exercise, we won\'t be returning a value. We are instead modifying a global variable, x. Write the function <code>incrementX</code> that increments the variable <code>x</code> by <code>amount</code>. ',
        Hint: [' Remember not to return anything here. ', ' Use <code>+=</code> to increase a variable by the given <code>amount</code>. ', ' Type the following code below the global variable x in the code editor and click on the RUN button:<br><br>\n<code>\nfunction incrementX(amount) {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;x += amount;<br>\n}\n</code> '],
        Solution: 'function ls_validate(result, code, output) {\n\n   try {\n     var x = 10;\n\n     incrementX(5);\n     return true;\n   } catch(err) {\n     return \'We are unable to check your code because it contains errors. Refer to the hints if you need help.\';\n   }\n\n   if (x == 15) {\n      return true;\n   } else {\n      return \'Please make sure that you are incrementing the x by amount.\';\n   }\n}',
        // Summary: ' You see, you don\'t always need to return something in a function. ',
        Summary: '<p>Congratulations on completing your fourth lesson!</p><p>Thank you for trying out our new approach on language learning.  That is all the lessons we have at the moment. Please shoot me an e-mail (john @ this domain) to let me know how you like this new course learning experience.',
        Description: ' Global Variables ',
        ReInitialize: 'False',
        EvalSolution: 'True',
        ExerciseID: "502368d52576784c22000011"
      }
    },
    Summary: ' <p>\n   Way to go! You graduated from the JavaScript console and just finished your first section in a code editor! Here is your summary for Lesson 4 - Functions of the Beginner JavaScript course.\n</p>\n<ul>\n     <li>\n           <b><u>Functions:</u></b>  Functions are blocks of code that only run when you tell them to run. They’re useful because they let you avoid writing the same piece of code over and over again by putting it in a function and calling it instead.\n     </li>\n     <li>\n           <b><u>( ):</u></b> In order to call a function, we put parentheses after the function name like hello().\n     </li>\n     <li>\n           <b><u>Arguments:</u></b> Functions can take arguments which go inside the parentheses, like square(5).\n     </li>\n     <li>\n           <b><u>Return:</u></b> You can return values in a function by using the return statement.\n     </li>\n     <li>\n           Here’s how you create a function:<br/>\n			<code>function function_name() {<br/>\n			 function body<br/>\n			}</code>\n     </li>\n</ul>\n</p>\n<p style="margin-bottom:10px;">\n    <font face="Helvetica, Arial, sans-serif" color="#606060" size="3">\n		<b>Quick Tip</b> <br/>\n		Functions are a really important part of programming. Most of the code you will write will be inside functions.\n		<p></p>\n		We hope you enjoyed lesson 4 on functions. If you have not done so already, please shoot me an e-mail (john @ this domain) to let me know how you like this new course learning experience.</font></p> ',
    CurrentLang: "javascript",
    count: 9
  });

}).call(this);
